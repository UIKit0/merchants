<?php

/**
 * @file
 *   uc_virtex.install
 *
 * Installation file for the Virtex payment module for Ubercart
 */


/**
 * Implementation of hook_requirements().
 */
function uc_virtex_requirements($phase) {
  $t = get_t();
  $requirements = array();
  // Virtex's provided API code requires cURL.
  $has_curl = function_exists('curl_init');
  if (variable_get('uc_payment_method_virtex_checkout', FALSE)) {
    $requirements['uc_virtex_curl'] = array(
      'title' => $t('cURL'),
      'value' => $has_curl ? $t('Enabled') : $t('Not found'),
    );
    if (!$has_curl) {
      $requirements['uc_virtex_curl']['severity'] = REQUIREMENT_ERROR;
      $requirements['uc_virtex_curl']['description'] = $t("Virtex requires the PHP <a href='!curl_url'>cURL</a> library.", array('!curl_url' => 'http://php.net/manual/en/curl.setup.php'));
    }
  }

  return $requirements;
}


/**
 * Implementation of hook_schema().
 */
function uc_virtex_schema() {
  $schema = array();

  $schema['uc_payment_virtex'] = array(
    'description' => 'Stores Virtex payment information.',
    'fields' => array(
      'invoice_id' => array(
        'description' => 'Primary key: the Virtex invoice ID.',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
      ),
      'order_id' => array(
        'description' => 'The {uc_orders}.order_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'notify_email' => array(
        'description' => 'The e-mail address to send status changes.',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
			'physical' => array(
			  'description' => 'Whether any physical good was purchased.',
				'type' => 'int',
				'unsigned' => TRUE,
				'default' => 1,
			),
			// NOTE: We're not storing Notification Level (confirm only/full),
			// Physical Good Indicator, Redirect URL, or Item Description,
			// all of which should be considered, but not necessarily used.
			// The buyer-specific data (Name, Address, etc.) won't be considered.
    ),
    'indexes' => array(
      'order_id' => array('order_id'),
    ),
    'primary key' => array('invoice_id')
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 *
 * Installs the Virtex module; particularly, installs the database
 * schema and alters orders statuses to include 'Virtex pending'.
 */
function uc_virtex_install() {
  // Set the module weight so it can override other modules.
  db_query("UPDATE {system} SET weight = 99 WHERE name = 'virtex'");
  // install the schema for the database
  drupal_install_schema('uc_virtex');
	// add two new order statuses
  $t = get_t();
  db_query("INSERT INTO {uc_order_statuses} (order_status_id, title, state, weight, locked) VALUES ('virtex_pending', '%s', 'post_checkout', 7, 1);", $t('Virtex - pending'));
  db_query("INSERT INTO {uc_order_statuses} (order_status_id, title, state, weight, locked) VALUES ('virtex_paid', '%s', 'payment_received', 7, 1);", $t('Virtex - paid'));
}


/**
 * Implementation of hook_uninstall()
 *
 * Uninstalls the Virtex module.
 */
function uc_virtex_uninstall() {
  // Remove the schema
  drupal_uninstall_schema('uc_virtex');
	// Remove relevant data from the DB
  db_query("DELETE FROM {variable} WHERE name LIKE 'uc_virtex_%%'");
}
