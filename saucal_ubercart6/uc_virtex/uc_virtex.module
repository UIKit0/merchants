<?php

/**
 * @file
 * Enabling Bitcoin payments via Virtex.com
 *
 * @creation October 2012
 * @author Rod Jackson (RDJ) - with the bulk of code derived
 * from Ubercart's v.6 included payment modules and from
 * Mike Gogulski's uc_bitcoin payment module
 */
 

require_once("bp_lib.php");
require_once("uc_virtex.pages.inc");

define ('VIRTEX_WEBSITE', "https://cavirtex.com");
 
 
define ('BITCOIN_ACCEPTED_LOGO_FILE', "/bitcoin-accepted.png");

define ('BITCOIN_ACCEPTED_LOGO_PATH', base_path() . drupal_get_path('module', 'uc_virtex') . BITCOIN_ACCEPTED_LOGO_FILE);

define ('VIRTEX_NOTIFY_URL', "uc_virtex/notifications");

define ('VIRTEX_INVOICE_EXPIRATION_TIME', "15"); // in minutes; keep as a string


/**
 * Settings form for the Virtex payment method module.
 * Not directly hooked into by Ubercart; called by
 * uc_payment_method_virtex()
 */
function uc_virtex_settings_form() {

	global $base_url;
	
	$form = array();

	$form['admin'] = array(
		'#type' => 'fieldset',
		'#title' => t('Administrator settings'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);
	$form['admin']['uc_virtex_current_api_key'] = array(
		'#type' => 'textfield',
		'#title' => t('Current Virtex API key'),
		'#default_value' => variable_get('uc_virtex_current_api_key', ''),
		'#description' =>
			t('Your current Virtex API key should be entered here. This key must be kept private. To view or edit your API keys, please go to your merchant account at ') . '<a href="' . VIRTEX_WEBSITE . '" target="_blank">' . t("Virtex's website") . '</a>.',
	);
	$form['admin']['uc_virtex_base_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Store website base URL'),
		'#default_value' => variable_get('uc_virtex_base_url', $base_url),
		'#description' =>
			t("Base URL of the store website. It is presented here primarily as an option to force the use of the 'https' version of your website if it doesn't automatically use it. Virtex ") . '<b>' . t('must') . '</b>' . t(" use 'https', so please add the 's' if needed. For reference, the store's internal base URL is normally: ") . '<b>' . $base_url . '</b>',
	);

	$form['general'] = array(
		'#type' => 'fieldset',
		'#title' => t('General settings'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
	);
	$form['general']['uc_virtex_currency'] = array(
		'#type' => 'select',
		'#title' => t('Store currency'),
		'#options' => _uc_virtex_currency_array(),
		'#default_value' => variable_get('uc_virtex_currency', 'BTC'),
		'#description' => t('The currency the store sets prices in. These prices are automatically converted to the current bitcoin price by Virtex. Merchants will receive the full value of the purchase (minus Virtex fees) without risk of cross-currency price volatility.'),
	);
	$form['general']['uc_virtex_fee_type'] = array(
		'#type' => 'select',
		'#title' => t('Bitcoin handling fee type'),
		'#options' => array(
			'percentage' => t('Percentage') . ' (%)',
			'multiplier' => t('Multiplier') . ' (x)',
			'addition'   => t('Addition') . ' (' . variable_get('uc_currency_sign', '$') . ')'
		),
		'#default_value' => variable_get('uc_virtex_fee_type', 'percentage'),
		'#description' => t('The type of bitcoin handling fee to add to the final price. This can be Percentage, a Multiplier, or a flat-amount Addition.'),
	);
	$form['general']['uc_virtex_fee_amt'] = array(
		'#type' => 'textfield',
		'#title' => t('Bitcoin handling fee amount'),
		'#default_value' => variable_get('uc_virtex_fee_amt', '0'),
		'#description' => t('The actual amount of the percent, multiplier or addition to be added to each bitcoin purchase. NOTE: If you want the customer to cover a Virtex fee of 3.99%, 2.69% or 0.99%, you should charge a handling fee of 4.16%, 2.77% or 1%, respectively (this assumes no other fees or extra line items will be collected. Adjust accordingly.)'),
	);

	return $form;
}


/**
 * Implements hook_menu().
 */
function uc_virtex_menu() {

	// Always accessible, accepts POST data from Virtex's servers
	// when being notified of status changes to an invoice.
	$items[VIRTEX_NOTIFY_URL] = array(
	'title' => 'Virtex Notifications',
	'access callback' => TRUE,
	'page callback' => 'uc_virtex_notification',
	'type' => MENU_CALLBACK,
	'file' => 'uc_virtex.pages.inc',
	);

	return $items;
}


/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function uc_virtex_help($path, $arg) {
	$o = '';  // declare your output variable
	switch ($path) {
		case "admin/help#virtex":
			$o .= '<p>'. 
				t('Implements the acceptance of bitcoin payments through the ') .
				"Virtex.com" . t(' API.') .'</p>';
			break;
	}
	return $o;
} // end function - uc_virtex_help


/**
 * Implements hook_payment_method().
 */
function uc_virtex_payment_method() {

	// only show it if we aren't in debug mode, or are an admin
	if ((!variable_get('uc_virtex_debug_mode', 0) ||
	user_access('access administration menu'))) {

		$title = '' .
			'<img src="' . BITCOIN_ACCEPTED_LOGO_PATH .
			'" style="position:relative; top:2px; margin-right:6px;" />';

		$methods[] = array(
			'id' => 'virtex',
			'name' => t('Bitcoin'),
			'title' => $title,
			'review' => t('Bitcoin via Virtex'),
			'desc' => t('Make a payment using bitcoins.'),
			'callback' => 'uc_payment_method_virtex',
			'weight' => 4,
			'checkout' => FALSE,
			'no_gateway' => TRUE,
		);

		return $methods;
  
	}
	else {
		return array();
	}
}


/**
 * Implementation of hook_order().
 */
function uc_virtex_order($op, $arg1, $arg2) {

	global $base_url;
	
	// check for order 'save' even if payment method isn't 'virtex';
	// they may have changed it from 'virtex', so if they're saving,
	// and we find a bitcoin handling fee line item, we should remove it
	if ($op == 'save') {
		foreach($arg1->line_items as $k => $line_item) {
			if($line_item['type'] == 'uc_virtex_fee') {
				unset($arg1->line_items[$k]);
				db_query('DELETE FROM {uc_order_line_items} WHERE order_id = %d AND type = "%s"', $arg1->order_id, 'uc_virtex_fee');
			}
		}
	}
	
	if (($arg1->payment_method == 'virtex') &&
	(!variable_get('uc_virtex_debug_mode', 0) ||
	user_access('access administration menu'))) {

		switch ($op) {

			case 'new':
			case 'save':

				// if there's a fee now, add the line item
				$fee = uc_virtex_get_handling_fee($arg1);
				if ($fee > 0) {
					uc_order_line_item_add($arg1->order_id, 'uc_virtex_fee', t('Bitcoin handling fee'), $fee, NULL);
				}
			  
				break;

			case 'total':
			
				$fee = uc_virtex_get_handling_fee($arg1);

				return $fee;

			case 'submit':

				// They're attempting to submit the order; check to make sure
				// they actually paid the Virtex invoice first (the status of
				// the invoice should be something other than 'new' or 'expired'.)
				$invoice_id = db_result(db_query("SELECT invoice_id FROM {uc_payment_virtex} WHERE order_id = %d", $arg1->order_id));
				$resp = bpGetInvoice($invoice_id, _get_bp_key());
				if (($resp['status'] == 'new') || ($resp['status'] == 'expired')) {
					// The invoice is still new or is expired; total payment wasn't made in time.
					$message = t('Full payment was not made on this order. If the invoice has expired and you still wish to make this purchase, please go back and checkout again. If it has expired and you made partial payment, but not full payment, please contact us for a refund or to apply the funds to another order.');

					return array(array('pass' => FALSE, 'message' => $message));
				}
				else {
					if ($resp['status'] == 'confirmed') {
						uc_order_update_status($arg1->order_id, 'virtex_paid');
					}
					else {
						// It's not confirmed yet; show the order status as Virtex pending.
						uc_order_update_status($arg1->order_id, 'virtex_pending');
					}
					return TRUE;
				}
		} // end switch - check for order action taken
	} // end if - check to make sure payment method is 'virtex', etc.
	
} // end function - uc_virtex_order


/**
 * Payment method callback for the Virtex payment method
 */
function uc_payment_method_virtex($op, &$order) {

	switch ($op) {

		case 'settings':
		
			return uc_virtex_settings_form();

		case 'cart-details':

			$txt = t('When you proceed to review your order, you will be shown a bitcoin address for payment, along with a QR code of the address.') . '<br /><br />' . t('The price will be converted to bitcoins at the current to-the-minute exchange rate, and you will have ') . VIRTEX_INVOICE_EXPIRATION_TIME . t(' minutes to send payment before the invoice expires.');
			$amt = uc_virtex_get_handling_fee($order);
			if ($amt > 0) {
				$txt .= '<br /><br /><b>' .
					t('Please note that a bitcoin handling fee of ') .
					uc_price($amt, array('revision' => 'formatted-original')) .
					t(' will be added to the final cost.') . '</b>';
			}
			$details = $txt;
			return $details;

		case 'cart-review':

			// If in the cart review area, then during the checkout
			// process we need to show the actual Virtex invoice inset
			// neatly into the display pane so the customer can see
			// the bitcoin address and pay right away, right there.

			// Check to see if a good invoice already exists
			$need_new_invoice = false;
			$result = db_result(db_query("SELECT invoice_id FROM {uc_payment_virtex} WHERE order_id = %d", $order->order_id));
			// if no valid invoice is found, we need a new one
			if (($result === false) || (!is_string($result))) {
				$need_new_invoice = true;
			}
			else {
				$resp = bpGetInvoice($result, _get_bp_key());
				if (is_array($resp)) {
					// check to see if the invoice is expired,
					// or price or currency have changed
					$text_total = uc_order_get_total($order);
					$text_total .= '';
					if (($resp['status'] == 'expired') ||
					($resp['price'] != $text_total) ||
					($resp['currency'] != variable_get('uc_virtex_currency', 'BTC'))) {
						// we need a new one
						$need_new_invoice = true;
					}
				}
				else {
					// if we couldn't get the invoice, assume we need one
					$need_new_invoice = true;
				}
			}

			// If we need a new Virtex invoice, create one immediately
			if ($need_new_invoice) {

				// Just in case of invoices created improperly or
				// expired, let's try to delete any that exist
				db_query("DELETE FROM {uc_payment_virtex} WHERE order_id = %d", $order->order_id);

				$resp = uc_virtex_create_invoice($order);

				// basic acid test to verify it didn't obviously fail
				if (is_array($resp)  && isset($resp['order_key'])) {
					// if successful, save the invoice data locally
					if (variable_get('uc_virtex_notify_email_active', FALSE)) {
						$notify_email = variable_get('uc_virtex_notify_email', '');
					}
					else {
						$notify_email = '';
					}
					$physical = (variable_get('uc_virtex_physical', 1));
					db_query("INSERT INTO {uc_payment_virtex} (invoice_id, order_id, notify_email, physical) VALUES ('%s', %d, '%s', %d)", $resp['order_key'], $order->order_id, $notify_email, $physical);
					$success = TRUE;
				}
				else {
					$success = FALSE;
				}

			}
			else {
				// a good invoice already exists! nothing left to do
				$success = TRUE;
			}

			// so long as the invoice now exists, we succeeded
			if ($success) {

				$invoice_id = db_result(db_query("SELECT invoice_id FROM {uc_payment_virtex} WHERE order_id = %d", $order->order_id));
				// $resp = bpGetInvoice($invoice_id, _get_bp_key());
				// $invoice_url = $resp['url'];
				
				global $bpOptions;
				$invoice_url = $bpOptions['apiURL'].'merchant_invoice?merchant_key='._get_bp_key().'&order_key='.$invoice_id;
				$review[] = uc_virtex_iframe_form($invoice_url);
			}
			else {
				$review[] = '<b>Error creating Virtex invoice</b>';
				watchdog('uc_virtex', 'Virtex invoice could not be found and/or created!', array(), WATCHDOG_ERROR);
			}
			
			return $review;

		case 'order-view':
		case 'customer-view':

			$invoice_id = db_result(db_query("SELECT invoice_id FROM {uc_payment_virtex} WHERE order_id = %d", $order->order_id));
			$txt = t('Virtex Invoice ID: ') . '<br />';

			if (empty($invoice_id)) {
				// display that there's no invoice ID!
				$txt .= t('Unknown invoice ID saved');
			}
			else {
				// display the invoice ID, with a link to the url
				// $resp = bpGetInvoice($invoice_id, _get_bp_key());
				// $url = $resp['url'];
				
				global $bpOptions;
				$invoice_url = $bpOptions['apiURL'].'merchant_invoice?merchant_key='._get_bp_key().'&order_key='.$invoice_id;
				$txt .=  '<a href="' . $invoice_url . '" target="_blank">' . $invoice_id . '</a>';
			}

			return $txt;

	}
} // end function - uc_payment_method_virtex


/**
 * Alter Ubercart's payment methods settings form to validate Virtex settings
 */
function uc_virtex_form_alter(&$form, $form_state, $form_id) {
	switch ($form_id) {
		case 'uc_payment_methods_form':
			if (variable_get('uc_payment_method_virtex_checkout', FALSE) || $form_state['values']['uc_payment_method_virtex_checkout']) {
				$form['#validate'][] = 'uc_virtex_settings_validate';
			}
			break;
	}
}


/**
 * Validate Virtex payment method settings.
 */
function uc_virtex_settings_validate($form, &$form_state) {

	// prepare to store the prior API key
	$prior = variable_get('uc_virtex_current_api_key', '');
	$err = false;

	// validate the necessary admin settings
	// current API key shouldn't be blank
	$c = $form_state['values']['uc_virtex_current_api_key'];
	if ($c == '') {
		$err = true;
		form_set_error('uc_virtex_current_api_key', t('A Virtex API key is required to use the Virtex payment method module.'));
	}

	// the store website base url shouldn't be blank
	$c = $form_state['values']['uc_virtex_base_url'];
	if ($c == '') {
		$err = true;
		form_set_error('uc_virtex_base_url', t('The website base URL should not be blank; please use the recommended URL rather than none.'));
	}

	// validate the necessary general settings
	// fee amount needs to be numeric and either zero or positive
	$c = $form_state['values']['uc_virtex_fee_amt'];
	if (!is_numeric($c)) {
		$err = true;
		form_set_error('uc_virtex_fee_amt', t('Handling fee amount must be a numeric value.'));
	}
	elseif ($c < 0) {
		$err = true;
		form_set_error('uc_virtex_fee_amt', t('Handling fee amount must be zero or positive.'));
	}

	// finish adjusting the prior API key
	if (!$err) {
		variable_set('uc_virtex_prior_api_key', $prior);
		$form_state['values']['uc_virtex_prior_api_key'] = $prior;
	}

} // end function - uc_virtex_settings_validate


/**
 * Actually prepare the data for a new Virtex invoice and create it.
 *
 * @param - $order: the order to pull data from for the invoice
 *
 * @param - $price: the price of the order. This is allowed to be set
 *   outside of the function, to bypass any problems with creating
 *   the invoice at different points in the code. If not given, it
 *   is directly calculated from uc_order_get_total($order)
 *
 * @return - returns the result of the bpCreateInvoice function from the
 *   Virtex API; this will be a string if there was an error creating
 *   the invoice, otherwise it will be an array, each element of which is
 *   the data of a field of the JSON object of the response (the fields
 *   being: 'id', 'url', 'posData', 'status', 'price', 'currency',
 *   'btcPrice', 'invoiceTime', 'expirationTime', and 'currentTime'.)
 *
 */
function uc_virtex_create_invoice($order, $price = false) {

	// Create a new Virtex invoice, and record the details.				
	// Order ID and passthru data need to be established.
	$order_id = $order->order_id;
	$pos_data = 'order=' . $order_id;
	
	// Calculate the price if necessary
	if ($price === false) {
 		$price = uc_order_get_total($order);
		// Seems like taxes don't round themselves,
		// so let's do the precision by hand again
		$prec = variable_get('uc_currency_prec', 2);
		$factor = pow(10, $prec);
		$large_price = $price * $factor;
		$price = floor($large_price + 0.5) / $factor; // round up
	}

	// Array the rest of the order data we need to send.
  // Start with notificationURL, notificationEmail
	// and fullNotifications
	$site_url = variable_get('uc_virtex_base_url', $base_url);
	
	$rurl = variable_get('uc_virtex_redirect_url', '');
	
  	// itemDesc
	// NOTE: There is a 100-char limit on descriptions;
	// going over the limit causes the invoice to be rejected.
	$desc = '';
	// get the products in the order
	foreach ($order->products as $product) {
		// describe the first item, then break & continue
		$desc = trim($product->qty . 'x ' . $product->title);
         	break;
	}
	 if (count($order->products) > 1) {
		$ending = ', etc.';
	 }
	 else {
		$ending = '';
	 }
	 if ((strlen($desc) + strlen($ending)) > 100) {
		$desc = substr($desc, 0, (97 - strlen($ending))) . $ending . '...';
	 }
	 else {
		$desc .= $ending;
	 }
	
	// buyerName
	$n = '';
  	if ($Fn = $order->billing_first_name) {
		$n = $Fn;
	}
	if ($Ln = $order->billing_last_name) {
		if ($n) {
			$n .= ' ' . $Ln;
  		}
		else {
			$n = $Ln;
		}
	}
	
	// Get State.
	$s = $order->billing_zone;
	if (is_numeric($s) && ($s != 0)) {
		$s = db_result(db_query("SELECT zone_code FROM {uc_zones} WHERE zone_id = %d", $s));
	}
	
	// Get Country.
	$country = $order->billing_country;
	if (is_null($country) || $country == 0) $country = variable_get('uc_store_country', 840);
	if (is_numeric($country)) $country = db_result(db_query("SELECT country_iso_code_3 FROM {uc_countries} WHERE country_id = %d", $country));;
	
	
	// create invoice
	$options = array(
		'name' => $desc,
		'return_url' =>  $rurl,
		'shipping_required' => 0,
		'currency' => variable_get('uc_virtex_currency', 'BTC'),
		'customer_name' => $n,
		'email' => $order->primary_email,
		'address' => $order->billing_street1,
		'city' => $order->billing_city,
		// 'province' => $s,
		// 'postal' => $order->billing_postal_code,
		// 'country' => $country,
		'apiKey' => _get_bp_key(),
	);
	bpLog($options);
	
	// now create the invoice
	$resp = bpCreateInvoice($order_id, $price, $pos_data, $options);
	bpLog($resp);

	return $resp;
}


/**
 * Implementation of hook_line_item
 *
 * Jay's tutorial on line items at:
 *   (http://www.jaypan.com/tutorial/ubercart-creating-line-items-tutorial)
 *
 * was incredibly helpful in finishing the line item code.
 *
 */
function uc_virtex_line_item() {

	$items[] = array(
		'id' => 'uc_virtex_fee', // You will use this ID in the javascript 
		'title' => t('Bitcoin handling fee'), // This is the text that will be displayed
		'callback' => 'uc_virtex_line_item_callback', // This is the callback function
		'weight' => 5, // This is the position of the line item in the total process
		'default' => TRUE,
		'stored' => TRUE, // This tells Ubercart to store the submitted data
		'calculated' => FALSE, // For line items that need to be calculated, not just displayed
		'display_only' => FALSE
	);

	return $items;
}


/**
 * Callback function for uc_virtex_line_item
 */
function uc_virtex_line_item_callback($op, $arg) {

	$lines = array();

	
	// I'd love to be able to show this on the checkout page;
	// but since we may not actually have an order created yet
	// on that page, there's nowhere yet to look and see if the
	// customer chose Virtex as payment method. Therefore, we
	// would always be calculating and displaying the fee if we
	// didn't deliberately kick out, never showing the fee if
	// the order doesn't exist. The customer will just have to
	// rely on the message given when they choose 'Virtex'.
	// For future alteration: refer to uc_payment_checkout_pane.inc
	// to locate the <div> with id 'payment_details' and use
	// Javascript to detect when that changes to include 'bitcoin',
	// then display the handling fee line item.
	
	if (($arg->payment_method != 'virtex') ||
			(variable_get('uc_virtex_debug_mode', 0) && !user_access('access administration menu'))) {
		return $lines;
	}

	switch ($op) {

		case 'display':

			$fee = uc_virtex_get_handling_fee($arg1);
			// if there's a fee, we add the line item
			// and return the lines for display
			if ($fee > 0) {
				$lines[] = array(
					'id' => 'uc_virtex_fee',
					'title' => t('Bitcoin handling fee'),
					'amount' => $fee,
				);
			}

			return $lines;
	}
} // end function - uc_virtex_line_item_callback


/**
 * Creates an inset iframe displaying the live Virtex invoice.
 * Requires the full URL of the invoice.
 */
function uc_virtex_iframe_form($url) {

	$iframe = '<iframe style="width:980px; height:500px; overflow:scroll; border:none; margin:auto; display:block;" allowtransparency="true"  frameborder="0" src="' . $url . '&view=iframe">' .
		'Your browser does not support IFRAMEs. Please click ' .
	 	'<a href="' . $url . '" target="_blank">HERE</a> ' .
		'to make payment, then return to this page to complete your order.' .
		'</iframe>';

	return $iframe;
}


/**
 * Caluculate the actual cost of any bitcoin handling fees set, if any
 */
function uc_virtex_get_handling_fee($arg, $subtotal = false) {

	if ($subtotal === false) {
		if (!isset($arg->order_id)) {
			// we need to calculate the subtotal by hand,
			// since there's no actual order given
			$subtotal = 0;
			$context = array();
			$contents = uc_cart_get_contents();
			foreach ($contents as $item) {
				$price_info = array(
					'price' => $item->price,
					'qty' => $item->qty,
				);
				$context['revision'] = 'altered';
				$context['type'] = 'cart_item';
				$context['subject'] = array(
					'cart' => $contents,
					'cart_item' => $item,
					'node' => node_load($item->nid),
				);
				$total = uc_price($price_info, $context);
				$subtotal += $total;
			}
		}
		else {
			$subtotal = uc_order_get_total($arg, TRUE);
		}
	}
	
	$amt = trim(variable_get('uc_virtex_fee_amt', '0'));
	if (!is_numeric($amt)) {
		$amt = 0;
	}

	switch (variable_get('uc_virtex_fee_type', 'percentage')) {
		case 'percentage':
			$markup = ($subtotal * $amt) / 100;
			break;
		case 'multiplier':
			$markup = $subtotal * $amt;
			break;
		case 'addition':
		default:
			$markup = $amt;
	}

	// I don't see any way to get the precision
	// right without doing it by hand, so...
	$prec = variable_get('uc_currency_prec', 2);
	$factor = pow(10, $prec);
	$large_markup = $markup * $factor;
	$markup = floor($large_markup + 0.5) / $factor; // round up

	return $markup;
}


/**
 * Returns an array of current Virtex accepted currencies
 */
function _uc_virtex_currency_array() {

	$currencies = array(
		'BTC' => '(BTC) ' . t('Bitcoin'),
		'USD' => '(USD) ' . t('US Dollar'),
		'EUR' => '(EUR) ' . t('Eurozone Euro'),
		'GBP' => '(GBP) ' . t('British Pound'),
		'AUD' => '(AUD) ' . t('Australian Dollar'),
		'BGN' => '(BGN) ' . t('Bulgarian Lev'),
		'BRL' => '(BRL) ' . t('Brasilian Real'),
		'CAD' => '(CAD) ' . t('Canadian Dollar'),
		'CHF' => '(CHF) ' . t('Swiss Franc'),
		'CNY' => '(CNY) ' . t('Chinese Yuan'),
		'CZK' => '(CZK) ' . t('Czech Koruna'),
		'DKK' => '(DKK) ' . t('Danish Krone'),
		'HKD' => '(HKD) ' . t('Hong Kong Dollar'),
		'HRK' => '(HRK) ' . t('Croatian Kuna'),
		'HUF' => '(HUF) ' . t('Hungarian Forint'),
		'IDR' => '(IDR) ' . t('Indonesian Rupiah'),
		'ILS' => '(ILS) ' . t('Isreali Shekel'),
		'INR' => '(INR) ' . t('Indian Rupee'),
		'JPY' => '(JPY) ' . t('Japanese Yen'),
		'KRW' => '(KRW) ' . t('South Korean Won'),
		'LTL' => '(LTL) ' . t('Lithuanian Litas'),
		'LVL' => '(LVL) ' . t('Latvian Lats'),
		'MXN' => '(MXN) ' . t('Mexican Peso'),
		'MYR' => '(MYR) ' . t('Malaysian Ringgit'),
		'NOK' => '(NOR) ' . t('Norwegian Krone'),
		'NZD' => '(NZD) ' . t('New Zealand Dollar'),
		'PHP' => '(PHP) ' . t('Philippine Peso'),
		'PLN' => '(PLN) ' . t('Polish Zloty'),
		'RON' => '(RON) ' . t('New Romanian Leu'),
		'RUB' => '(RUB) ' . t('Russian Rouble'),
		'SEK' => '(SEK) ' . t('Swedish Krona'),
		'SGD' => '(SGD) ' . t('Singapore Dollar'),
		'THB' => '(THB) ' . t('Thai Baht'),
		'TRY' => '(TRY) ' . t('Turkish Lira'),
		'ZAR' => '(ZAR) ' . t('South African Rand')
	);
	
	return $currencies;
}
